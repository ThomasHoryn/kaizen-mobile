package com.kaizenmobile.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAllPropertiesEquals(AppUser expected, AppUser actual) {
        assertAppUserAutoGeneratedPropertiesEquals(expected, actual);
        assertAppUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAllUpdatablePropertiesEquals(AppUser expected, AppUser actual) {
        assertAppUserUpdatableFieldsEquals(expected, actual);
        assertAppUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertAppUserMapsIdRelationshipPersistedValue(AppUser entityToPersist, AppUser persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAutoGeneratedPropertiesEquals(AppUser expected, AppUser actual) {
        assertThat(expected)
            .as("Verify AppUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserUpdatableFieldsEquals(AppUser expected, AppUser actual) {
        assertThat(expected)
            .as("Verify AppUser relevant properties")
            .satisfies(e -> assertThat(e.getTenantId()).as("check tenantId").isEqualTo(actual.getTenantId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserUpdatableRelationshipsEquals(AppUser expected, AppUser actual) {}
}
